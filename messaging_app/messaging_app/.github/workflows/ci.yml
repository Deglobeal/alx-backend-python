name: Django CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:   # MySQL service
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: supersecretroot
          MYSQL_DATABASE: messaging_db
          MYSQL_USER: messaging_user
          MYSQL_PASSWORD: messaging_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      DB_NAME: messaging_db
      DB_USER: messaging_user
      DB_PASSWORD: messaging_pass
      DB_HOST: db   # must match service name
      DB_PORT: 3306
      SECRET_KEY: testsecretkey

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip3 install -r messaging_app/requirements.txt
          pip3 install flake8 coverage pytest pytest-django pytest-cov

      - name: Run flake8 (Linting)
        run: |
          cd messaging_app
          # exit with error if linting issues found
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run migrations
        run: |
          cd messaging_app
          python manage.py migrate --noinput

      - name: Run tests with coverage
        run: |
          cd messaging_app
          pytest --ds=messaging_app.settings \
            --cov=. \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=pytest-results.xml

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: messaging_app/htmlcov

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: messaging_app/pytest-results.xml
